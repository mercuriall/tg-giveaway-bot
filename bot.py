from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import F
import asyncio
from datetime import datetime
import aiohttp
import uuid

API_TOKEN = "TG bot token"
RANDOM_ORG_API_KEY = "random.org API"

# –∑–∞–ø—Ä–æ—Å –Ω–∞ random.org
async def fetch_random_numbers(api_key, n, min_value, max_value):
    url = "https://api.random.org/json-rpc/4/invoke"
    headers = {"Content-Type": "application/json"}
    payload = {
        "jsonrpc": "2.0",
        "method": "generateIntegers",
        "params": {
            "apiKey": api_key,
            "n": n,
            "min": min_value,
            "max": max_value,
            "replacement": False
        },
        "id": 1
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            data = await response.json()

            if 'result' in data and 'random' in data['result']:
                return data['result']['random']['data']
            else:
                error_message = data.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                raise Exception(f"–û—à–∏–±–∫–∞ –æ—Ç random.org: {error_message}")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

class ContestStates(StatesGroup):
    SET_DATE_TIME = State()
    SET_PRIZES = State()
    SET_GROUP = State()
    SET_POST_TEXT = State()
    SET_IMAGES = State()
    SET_SUBSCRIPTION = State()

contests = {}
participants = {}

@router.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_new_contest")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@router.callback_query(F.data == "create_new_contest")
async def create_new_contest(callback: CallbackQuery):
    temporary_data = {"created_by": callback.from_user.id, "completed": False}
    contests["temporary"] = temporary_data

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="set_date_time_temporary")],
        [InlineKeyboardButton(text="üèÜ –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç", callback_data="set_prizes_temporary")],
        [InlineKeyboardButton(text="‚úâÔ∏è –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="set_group_temporary")],
        [InlineKeyboardButton(text="‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="set_subscription_temporary")],
        [InlineKeyboardButton(text="üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", callback_data="set_post_text_temporary")],
        [InlineKeyboardButton(text="üé® –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="set_images_temporary")],
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data="publish_contest_temporary")]
    ])
    await callback.message.answer(
        "–ö–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard
    )
    await callback.answer()

# –£–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@router.callback_query(F.data.startswith("set_date_time_"))
async def set_date_time(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    await state.set_state(ContestStates.SET_DATE_TIME)
    await state.update_data(contest_id=contest_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú")
    await callback.answer()

@router.message(ContestStates.SET_DATE_TIME)
async def handle_date_time_input(message: Message, state: FSMContext):
    data = await state.get_data()
    contest_id = data['contest_id']
    try:
        end_datetime = datetime.strptime(message.text, "%d-%m-%Y %H:%M")
        
        if end_datetime <= datetime.now():
            await message.reply("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        
        contests[contest_id]['end_datetime'] = end_datetime
        await message.reply(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {message.text}")
        await state.clear()
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@router.callback_query(F.data.startswith("set_subscription_"))
async def set_subscription(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    await state.set_state(ContestStates.SET_SUBSCRIPTION)
    await state.update_data(contest_id=contest_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"subscribe_yes_{contest_id}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"subscribe_no_{contest_id}")]
    ])
    await callback.message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª?", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("subscribe_yes_"))
async def subscribe_yes(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    contests[contest_id]['require_subscription'] = True
    await callback.message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
    await state.set_state(ContestStates.SET_GROUP)

@router.callback_query(F.data.startswith("subscribe_no_"))
async def subscribe_no(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    contests[contest_id]['require_subscription'] = False
    await callback.message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await state.clear()

# –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç
@router.callback_query(F.data.startswith("set_prizes_"))
async def set_prizes(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    await state.set_state(ContestStates.SET_PRIZES)
    await state.update_data(contest_id=contest_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç")
    await callback.answer()

@router.message(ContestStates.SET_PRIZES)
async def handle_prizes_input(message: Message, state: FSMContext):
    data = await state.get_data()
    contest_id = data['contest_id']
    try:
        contests[contest_id]['prizes'] = int(message.text)
        await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {message.text}")
        await state.clear()
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –£–∫–∞–∑–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("set_group_"))
async def set_group(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    await state.set_state(ContestStates.SET_GROUP)
    await state.update_data(contest_id=contest_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É:")
    await callback.answer()

@router.message(ContestStates.SET_GROUP)
async def handle_group_input(message: Message, state: FSMContext):
    data = await state.get_data()
    contest_id = data['contest_id']
    contests[contest_id]['group'] = message.text
    await message.reply(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}")
    await state.clear()

# –£–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
@router.callback_query(F.data.startswith("set_post_text_"))
async def set_post_text(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    await state.set_state(ContestStates.SET_POST_TEXT)
    await state.update_data(contest_id=contest_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:")
    await callback.answer()

@router.message(ContestStates.SET_POST_TEXT)
async def handle_post_text_input(message: Message, state: FSMContext):
    data = await state.get_data()
    contest_id = data['contest_id']
    contests[contest_id]['post_text'] = message.text
    await message.reply("–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.callback_query(F.data.startswith("set_images_"))
async def set_images(callback: CallbackQuery, state: FSMContext):
    contest_id = callback.data.split("_")[-1]
    await state.set_state(ContestStates.SET_IMAGES)
    await state.update_data(contest_id=contest_id)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞:")
    await callback.answer()

@router.message(ContestStates.SET_IMAGES)
async def handle_images_input(message: Message, state: FSMContext):
    data = await state.get_data()
    contest_id = data['contest_id']
    if 'images' not in contests[contest_id]:
        contests[contest_id]['images'] = []
    contests[contest_id]['images'].append(message.photo[-1].file_id)
    await message.reply("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.callback_query(F.data.startswith("publish_contest_"))
async def publish_contest(callback: CallbackQuery):
    contest_id = callback.data.split("_")[-1]
    if contest_id == "temporary":
        contest = contests.get("temporary")
    else:
        contest = contests.get(contest_id)

    if not contest or not all(key in contest for key in ('end_datetime', 'prizes', 'group', 'post_text')):
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–∫—É—Ä—Å–∞!")
        return

    group_username = contest['group'].replace("https://t.me/", "")
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
    try:
        member = await bot.get_chat_member(chat_id=f"@{group_username}", user_id=user_id)
        if member.status not in ["administrator", "creator"]:
            if "temporary" in contests:
                del contests["temporary"]

            await callback.message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
            return
    except Exception as e:
        if "temporary" in contests:
            del contests["temporary"]

        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ –≥—Ä—É–ø–ø–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–û—à–∏–±–∫–∞: {e}")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
    generated_uuid = str(uuid.uuid4())
    contests[generated_uuid] = contest
    del contests["temporary"]
    contest['id'] = generated_uuid

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    contest_message = (
        f"{contest['post_text']}\n\n"
        f"üìÖ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π {contest['end_datetime'].strftime('%d.%m.%Y –≤ %H:%M')}\n"
        f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {contest['prizes']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!"
    )

    participate_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å (0)", callback_data=f"participate_{generated_uuid}")]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞
    try:
        if 'images' in contest and contest['images']:
            if len(contest['images']) == 1:
                msg = await bot.send_photo(
                    chat_id=f"@{group_username}",
                    photo=contest['images'][0],
                    caption=contest_message,
                    reply_markup=participate_button
                )
            else:
                media_group = [
                    {"type": "photo", "media": file_id} for file_id in contest['images']
                ]
                await bot.send_media_group(chat_id=f"@{group_username}", media=media_group)
                
                msg = await bot.send_message(
                    chat_id=f"@{group_username}",
                    text=contest_message,
                    reply_markup=participate_button
                )
        else:
            msg = await bot.send_message(
                chat_id=f"@{group_username}",
                text=contest_message,
                reply_markup=participate_button
            )

        contest['message_id'] = msg.message_id
        await callback.message.answer(f"–ö–æ–Ω–∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –ï–≥–æ ID: {generated_uuid}")

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É. –û—à–∏–±–∫–∞: {e}")

# –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
@router.callback_query(F.data.startswith("participate_"))
async def participate(callback: CallbackQuery):
    contest_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    username = callback.from_user.username or callback.from_user.full_name

    contest = contests.get(contest_id)
    if not contest:
        await callback.answer("–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", show_alert=True)
        return
    
    if contest.get('completed', False):
        await callback.answer("–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", show_alert=True)
        return
        
    if contest.get('require_subscription'):
        group_username = contest['group'].replace("https://t.me/", "")
        try:
            member = await bot.get_chat_member(chat_id=f"@{group_username}", user_id=user_id)
            if member.status == "left":
                await callback.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
                return
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", show_alert=True)
            return

    if contest_id not in participants:
        participants[contest_id] = {}

    if user_id in participants[contest_id]:
        await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", show_alert=True)
    else:
        participant_number = len(participants[contest_id]) + 1
        participants[contest_id][user_id] = participant_number

        button_text = f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({len(participants[contest_id])})"
        participate_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=button_text, callback_data=f"participate_{contest_id}")]
        ])
        await callback.message.edit_reply_markup(reply_markup=participate_button)
        await callback.answer("–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É—á–∞—Å—Ç–∏–µ!", show_alert=True)

def reset_participants(contest_id):
    if contest_id in participants:
        participants[contest_id] = {}

# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
async def announce_winners(contest_id):
    contest = contests.get(contest_id)
    group_username = contest['group'].replace("https://t.me/", "")
    prize_count = contest.get('prizes', 1)
    
    participants_list = list(participants.get(contest_id, {}).items())
    total_participants = len(participants_list)

    if total_participants == 0:
        await bot.send_message(chat_id=f"@{group_username}", text="üòû —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ.")
        reset_participants(contest_id)
        return

    winners = []
    tries = 0

    while len(winners) < prize_count and tries < total_participants * 2:
        try:
            winner_ids = await fetch_random_numbers(RANDOM_ORG_API_KEY, 1, 1, total_participants)
            winner_id = participants_list[winner_ids[0] - 1][0]

            if contest.get('require_subscription'):
                member = await bot.get_chat_member(chat_id=f"@{group_username}", user_id=winner_id)
                if member.status == "left":
                    tries += 1
                    continue

            if winner_id not in winners:
                winners.append(winner_id)
        except Exception as e:
            tries += 1

    if not winners:
        await bot.send_message(chat_id=f"@{group_username}", text="‚ùå –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        reset_participants(contest_id)
        return

    if len(winners) == 1:
        result_message = (
            f"üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: [{winners[0]}](tg://user?id={winners[0]})"
        )
    else:
        winners_text = "\n".join([f"{i + 1}) [{winner}](tg://user?id={winner})" for i, winner in enumerate(winners)])
        result_message = (
            f"üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {prize_count}\n\n"
            f"üéä –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_text}"
        )

    await bot.send_message(chat_id=f"@{group_username}", text=result_message, parse_mode="Markdown")
    reset_participants(contest_id)

async def check_contests():
    while True:
        now = datetime.now()
        for contest_id, contest in contests.items():
            end_datetime = contest.get('end_datetime')
            if end_datetime and now >= end_datetime and not contest.get('completed'):
                contests[contest_id]['completed'] = True
                await announce_winners(contest_id)
        await asyncio.sleep(60)

async def on_startup():
    asyncio.create_task(check_contests())

dp.startup.register(on_startup)

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
